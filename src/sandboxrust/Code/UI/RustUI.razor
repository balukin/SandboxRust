@using Sandbox;
@using Sandbox.UI;
@using System.Threading.Tasks;
@using System.Threading

<root>
    @if ( HudVisible )
    {
        @if ( !OptionsOpen )
		{
			<div id="top-left-overlay">
				<div class="hud-panel">
					<HudItem Icon="🔍" Text="Toggle HUD" Explainer="(H)" />
					<HudItem Icon="🛠️" Text="Quality Options" Explainer="(Q)" />				
					<HudItem Icon="🔦" Text=@($"Flashlight: {(FlashlightEnabled ? "On" : "Off")}") Explainer="(F)" />
					<HudItem Icon="🎨" Text=@($"Rendering Mode: {RenderingMode}") Explainer="(R)" />
					<HudItem Icon="⏳" Text=@($"Rusting Speed: {OxygenLevel:P0}") Explainer="(🠉 🠋)" />
					<HudItem Icon="🧊" Text=@($"Mesh Erosion Interval: {ErosionFrequency}") Explainer="(🠈 🠊)" />
					<HudItem Icon="⏩" Text=@($"Erosion Strength: {ErosionStrength:F1}") Explainer="(+, -)" />
				</div>
			</div>

			<div id="context-explainer">
				<div class="hud-panel">
					<div class="explainer-text">@ExplainerText</div>
				</div>
			</div>
		}
		else
		{
			<div id="options-container">
				<div id="options" class="hud-panel">
					<div class="option-group">
						<label>Volumetric Data Resolution</label>
						<ButtonGroup Value:bind=@VolumeResolution ValueChanged=@SomethingChanged Options=@ResolutionOptions/>
						<div class="explainer">Higher values allow more detail but increase VRAM per object cubically</div>
					</div>

					<div class="option-group">
						<label>Max Simulated Updates Per Frame</label>
						<ButtonGroup Value:bind=@ObjectUpdatesPerFrame ValueChanged=@SomethingChanged Options=@UpdateFrequencyOptions/>
						<div class="explainer">Controls how many objects are updated each frame</div>
					</div>

					<div class="option-group">
						<label>Rust Shading Quality</label>
						<ButtonGroup Value:bind=@SoftRustEnabled ValueChanged=@SomethingChanged Options=@QualityOptions/>
						<div class="explainer">Soft rust enables smoother transitions at the cost of extra texture sampling
						</div>
					</div>
					<div class="option-group">
						<label>Recalculate Normals</label>
						<ButtonGroup Value:bind=@RecalculateNormals ValueChanged=@SomethingChanged Options=@RecalculateNormalsOptions/>
						<div class="explainer">
							Recalculate normals for meshes after deformation
						</div>
					</div>
					<Button id="close-button" Text="Close" onclick=@( () => OptionsOpen = false )/>
				</div>
			</div>
		}
	}

</root>

@code {

    public bool OptionsOpen
    {
        get => optionsOpen;
        set
        {
            optionsOpen = value;
            Mouse.Visible = optionsOpen;
        }
    }

	public bool HudVisible { get; set; } = true;
    public float OxygenLevel { get; set; }
    public bool FlashlightEnabled { get; set; }
    public RustRenderingMode RenderingMode { get; set; }
    public int ErosionFrequency { get; set; }
    public float ErosionStrength { get; set; }
    public int VolumeResolution { get; set; } = 64;
    public int ObjectUpdatesPerFrame { get; set; } = 1;
    public bool SoftRustEnabled { get; set; } = true;
    public bool RecalculateNormals { get; set; } = true;

    public string ExplainerText { get; set; } = ExplainerDefault;
    public const string ExplainerDefault = $"Use LMB to spray water on the metallic objects. " +
											$"Use RMB to hit the rusted objects with a crowbar";

	private CancellationTokenSource debounceCts;
	private bool optionsOpen = false;
	private List<Option> ResolutionOptions { get; } = new()
	{
		new Option( "16", 16 ),
		new Option( "32", 32 ),
		new Option( "64", 64 ),
		new Option( "128", 128 )
	};

	private List<Option> UpdateFrequencyOptions { get; } = new()
	{
		new Option( "1", 1 ),
		new Option( "2", 2 ),
		new Option( "4", 4 ),
		new Option( "8", 8 )
	};

	private List<Option> QualityOptions { get; } = new()
	{
		new Option( "Standard", false ),
		new Option( "Soft", true ) 
	};

    private List<Option> RecalculateNormalsOptions { get; } = new()
    {
        new Option( "No", false ),
        new Option( "Yes", true ) 
    };

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		StyleSheet.Load( "/UI/RustUI.scss" );
	}

	private void SomethingChanged(string value)
	{
		debounceCts?.Cancel();
		debounceCts = new CancellationTokenSource();
		
		// Debounce the changes plus fix the thing where the value is still the old value when ValueChanged is called
		Task.Delay(500, debounceCts.Token).ContinueWith( _ =>
		{
			var scene = FindRootPanel().Scene;
			var qualitySystem = scene.GetSystem<QualitySystem>();

			qualitySystem.ObjectUpdatesPerFrame = ObjectUpdatesPerFrame;
			qualitySystem.VolumeResolution = VolumeResolution;
			qualitySystem.SoftRustEnabled = SoftRustEnabled;
			qualitySystem.RecalculateNormals = RecalculateNormals;

			Log.Info($"QualitySystem updated: {qualitySystem.ObjectUpdatesPerFrame}, {qualitySystem.VolumeResolution}, {qualitySystem.SoftRustEnabled}");
		} );
	}

	protected override int BuildHash() => System.HashCode.Combine(
		System.HashCode.Combine(
			OxygenLevel,
			FlashlightEnabled,
			RenderingMode,
			OptionsOpen,
			VolumeResolution,
			ExplainerText
		),
		System.HashCode.Combine(
			ObjectUpdatesPerFrame,
			SoftRustEnabled,
			ErosionFrequency,
			ErosionStrength,
			HudVisible,
			RecalculateNormals
		)
	);

}
