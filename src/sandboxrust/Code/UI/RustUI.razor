@using Sandbox;
@using Sandbox.UI;
@using System.Threading.Tasks;
@using System.Threading

<root>
	@if ( !OptionsOpen )
	{
		<div id="top-left-overlay">
			<div class="hud-panel">
				<div class="hud-item">
					<span class="icon">üõ†Ô∏è</span>
					<span class="text">Quality Options</span>
					<span class="explainer">
                        (Q)
                    </span>
				</div>
				<div class="hud-item">
					<span class="icon">‚è≥</span>
					<span class="text">Rusting Speed: @( OxygenLevel.ToString( "P0" ) )</span>
					<span class="explainer">
                        (ü†â ü†ã)
                    </span>
				</div>
				<div class="hud-item">
					<span class="icon">üßä</span>
					<span class="text">Mesh Erosion Interval: @ErosionFrequency</span>
					<span class="explainer">
                        (ü†à ü†ä)
                    </span>
				</div>
				<div class="hud-item">
					<span class="icon">üî¶</span>
					<span class="text">Flashlight: @( FlashlightEnabled ? "On" : "Off" )</span>
					<span class="explainer">
                        (F)
                    </span>
				</div>
				<div class="hud-item">
					<span class="icon">üé®</span>
					<span class="text">Rendering Mode: @RenderingMode</span>
					<span class="explainer">
                        (R)
                    </span>
				</div>				
				<div class="hud-item">
					<span class="icon">‚è©</span>
					<span class="text">Erosion Strength: @ErosionStrength</span>
					<span class="explainer">
                        (ü†à ü†ä)
                    </span>
				</div>
			</div>
		</div>
	}
	else
	{
		<div id="options-container">
			<div id="options" class="hud-panel">
				<div class="option-group">
					<label>Volumetric Data Resolution</label>
					<ButtonGroup Value:bind=@VolumeResolution ValueChanged=@SomethingChanged Options=@ResolutionOptions/>
					<div class="explainer">Higher values allow more detail but increase VRAM per object cubically</div>
				</div>

				<div class="option-group">
					<label>Max Simulated Updates Per Frame</label>
					<ButtonGroup Value:bind=@ObjectUpdatesPerFrame ValueChanged=@SomethingChanged Options=@UpdateFrequencyOptions/>
					<div class="explainer">Controls how many objects are updated each frame</div>
				</div>

				<div class="option-group">
					<label>Rust Shading Quality</label>
					<ButtonGroup Value:bind=@SoftRustEnabled ValueChanged=@SomethingChanged Options=@QualityOptions/>
					<div class="explainer">Soft rust enables smoother transitions at the cost of extra texture sampling
					</div>
				</div>
				<Button id="close-button" Text="Close" onclick=@( () => OptionsOpen = false )/>
			</div>
		</div>
	}

</root>

@code {

	public bool OptionsOpen
	{
		get => optionsOpen;
		set
		{
			optionsOpen = value;
			Mouse.Visible = optionsOpen;
		}
	}

	public float OxygenLevel { get; set; }
	public bool FlashlightEnabled { get; set; }
	public RustRenderingMode RenderingMode { get; set; }
	public int ErosionFrequency { get; set; }
	public float ErosionStrength { get; set; }
	public int VolumeResolution { get; set; } = 64;
	public int ObjectUpdatesPerFrame { get; set; } = 1;
	public bool SoftRustEnabled { get; set; } = true;


	private CancellationTokenSource debounceCts;
	private bool optionsOpen = false;
	private List<Option> ResolutionOptions { get; } = new()
	{
		new Option( "16", 16 ),
		new Option( "32", 32 ),
		new Option( "64", 64 ),
		new Option( "128", 128 )
	};

	private List<Option> UpdateFrequencyOptions { get; } = new()
	{
		new Option( "1", 1 ),
		new Option( "2", 2 ),
		new Option( "4", 4 ),
		new Option( "8", 8 )
	};

	private List<Option> QualityOptions { get; } = new()
	{
		new Option( "Standard", false ),
		new Option( "Soft", true ) 
	};

	protected override void OnAfterTreeRender( bool firstTime )
	{
		base.OnAfterTreeRender( firstTime );

		StyleSheet.Load( "/UI/RustUI.scss" );
	}

	private void SomethingChanged(string value)
	{
		debounceCts?.Cancel();
		debounceCts = new CancellationTokenSource();
		
		// Debounce the changes plus fix the thing where the value is still the old value when ValueChanged is called
		Task.Delay(500, debounceCts.Token).ContinueWith( _ =>
		{
			var scene = FindRootPanel().Scene;
			var qualitySystem = scene.GetSystem<QualitySystem>();

			qualitySystem.ObjectUpdatesPerFrame = ObjectUpdatesPerFrame;
			qualitySystem.VolumeResolution = VolumeResolution;
			qualitySystem.SoftRustEnabled = SoftRustEnabled;

			Log.Info($"QualitySystem updated: {qualitySystem.ObjectUpdatesPerFrame}, {qualitySystem.VolumeResolution}, {qualitySystem.SoftRustEnabled}");
		} );
	}

	protected override int BuildHash() => System.HashCode.Combine(
		System.HashCode.Combine(
			OxygenLevel,
			FlashlightEnabled,
			RenderingMode,
			OptionsOpen,
			VolumeResolution
		),
		System.HashCode.Combine(
			ObjectUpdatesPerFrame,
			SoftRustEnabled,
			ErosionFrequency,
			ErosionStrength
		)
	);

}
